# main.py
import asyncio
import logging
import threading
import time
from datetime import datetime

import pandas as pd
import pandas_ta as ta
import schedule
from tinkoff.invest import CandleInterval, OrderDirection, StopOrderDirection

import config
from risk_manager import RiskManager
from strategy import StrategyManager
from telegram_bot import TelegramBot
from tinkoff_client import TinkoffClient

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
trading_active = False
top_instruments = []
last_prices = {}
daily_report = {"trades": 0, "profit": 0, "loss": 0}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º (–¥–ª—è Telegram) ---
def start_trading():
    global trading_active
    if not trading_active:
        trading_active = True
        logging.info("–¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram.")

def stop_trading():
    global trading_active
    if trading_active:
        trading_active = False
        logging.info("–¢–æ—Ä–≥–æ–≤–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram.")
        
def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞."""
    status_text = f"ü§ñ **–°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞** ü§ñ\n\n"
    status_text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ê–ö–¢–ò–í–ï–ù' if trading_active else '–û–°–¢–ê–ù–û–í–õ–ï–ù'}\n"
    status_text += f"–†–µ–∂–∏–º API: {'–ü–µ—Å–æ—á–Ω–∏—Ü–∞' if config.USE_SANDBOX else '–ë–æ–µ–≤–æ–π'}\n\n"
    status_text += f"**–¢–æ—Ä–≥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(top_instruments)}):**\n"
    for inst in top_instruments:
        price = last_prices.get(inst['figi'], 'N/A')
        status_text += f"- {inst['ticker']} ({inst['name']}): {price} RUB\n"
    return status_text

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞ ---
async def select_top_volatile_instruments(client: TinkoffClient):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR.
    """
    global top_instruments, telegram_bot
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Å–∞–º—ã—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    await telegram_bot.send_message("üîç –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    all_shares = await client.get_all_tradable_shares()
    if not all_shares:
        await telegram_bot.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    volatility_data = []
    for share in all_shares:
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR
        candles = await client.get_historical_candles(share.figi, days=config.VOLATILITY_PERIOD_DAYS, interval=CandleInterval.CANDLE_INTERVAL_DAY)
        if len(candles) < config.VOLATILITY_PERIOD_DAYS:
            continue
            
        df = pd.DataFrame([{
            'time': c.time,
            'high': float(c.high.units + c.high.nano / 1e9),
            'low': float(c.low.units + c.low.nano / 1e9),
            'close': float(c.close.units + c.close.nano / 1e9),
        } for c in candles])
        
        # –†–∞—Å—á–µ—Ç ATR
        atr = df.ta.atr(length=14).iloc[-1]
        last_close = df['close'].iloc[-1]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        if last_close > 0:
            normalized_atr = (atr / last_close) * 100
            volatility_data.append({'figi': share.figi, 'ticker': share.ticker, 'name': share.name, 'volatility': normalized_atr})

    if not volatility_data:
        await telegram_bot.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N
    volatility_data.sort(key=lambda x: x['volatility'], reverse=True)
    top_instruments = volatility_data[:config.TOP_VOLATILE_INSTRUMENTS_COUNT]
    
    message = "‚úÖ **–¢–æ–ø-10 –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
    for i, item in enumerate(top_instruments):
        message += f"{i+1}. {item['ticker']} ({item['name']}) - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {item['volatility']:.2f}%\n"
    await telegram_bot.send_message(message)
    logging.info("–°–ø–∏—Å–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")

async def trading_cycle(client: TinkoffClient, risk_manager: RiskManager, strategy_manager: StrategyManager):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ.
    """
    global top_instruments, last_prices, telegram_bot
    
    if not top_instruments:
        logging.warning("–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª.")
        await asyncio.sleep(60)
        return

    figi_list = [inst['figi'] for inst in top_instruments]
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    current_prices = await client.get_last_prices(figi_list)
    if not current_prices:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
        return
    last_prices.update(current_prices)

    # 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∏ –∏—â–µ–º —Å–∏–≥–Ω–∞–ª—ã
    for instrument in top_instruments:
        figi = instrument['figi']
        last_price = current_prices.get(figi)

        if not last_price:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        candles = await client.get_historical_candles(figi, days=2, interval=CandleInterval.CANDLE_INTERVAL_5_MINUTE)
        if len(candles) < 50: # –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            continue
        
        candles_df = pd.DataFrame([{
            'time': c.time, 'open': float(c.open.units + c.open.nano/1e9),
            'high': float(c.high.units + c.high.nano/1e9), 'low': float(c.low.units + c.low.nano/1e9),
            'close': float(c.close.units + c.close.nano/1e9), 'volume': c.volume
        } for c in candles])
        candles_df.set_index('time', inplace=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        signal, reason = strategy_manager.get_signal(candles_df, float(last_price))
        
        if signal != "HOLD":
            logging.info(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {instrument['ticker']}: {signal}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size_lots = await risk_manager.calculate_position_size(figi, float(last_price))
            
            if position_size_lots > 0:
                instrument_info = await client.get_instrument_info(figi)
                quantity = position_size_lots * instrument_info['lot']
                direction = OrderDirection.ORDER_DIRECTION_BUY if signal == "BUY" else OrderDirection.ORDER_DIRECTION_SELL
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                order = await client.post_market_order(figi, position_size_lots, direction)
                
                if order:
                    risk_manager.record_trade(figi)
                    
                    # –†–∞—Å—á–µ—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP
                    sl_price, tp_price = risk_manager.calculate_sl_tp(float(last_price), signal)
                    
                    sl_direction = StopOrderDirection.STOP_ORDER_DIRECTION_SELL if signal == "BUY" else StopOrderDirection.STOP_ORDER_DIRECTION_BUY
                    tp_direction = sl_direction
                    
                    await client.post_stop_order(figi, quantity, sl_price, sl_direction)
                    await client.post_stop_order(figi, quantity, tp_price, tp_direction)
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    trade_message = (
                        f"üöÄ **–ù–û–í–ê–Ø –°–î–ï–õ–ö–ê** üöÄ\n\n"
                        f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {instrument['ticker']} ({instrument['name']})\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–ü–û–ö–£–ü–ö–ê' if signal == 'BUY' else '–ü–†–û–î–ê–ñ–ê'}\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {last_price:.4f} RUB\n"
                        f"–û–±—ä–µ–º: {quantity} —à—Ç. ({position_size_lots} –ª–æ—Ç–æ–≤)\n"
                        f"Stop Loss: {sl_price:.4f}\n"
                        f"Take Profit: {tp_price:.4f}\n\n"
                        f"<i>–ü—Ä–∏—á–∏–Ω–∞: {reason}</i>"
                    )
                    await telegram_bot.send_message(trade_message)
            else:
                logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É –ø–æ {instrument['ticker']}: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 0 –∏–ª–∏ –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫.")
    
async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global trading_active, telegram_bot
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    risk_manager = None
    strategy_manager = StrategyManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    app_controls = {
        'start_trading': start_trading,
        'stop_trading': stop_trading,
        'get_status': get_status,
    }
    telegram_bot = TelegramBot(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID, app_controls)
    threading.Thread(target=telegram_bot.run, daemon=True).start()
    
    # –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    await asyncio.sleep(2)
    await telegram_bot.send_message("ü§ñ **–†–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Tinkoff
    async with TinkoffClient(config.TINKOFF_API_TOKEN, config.USE_SANDBOX) as client:
        risk_manager = RiskManager(client)
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        await select_top_volatile_instruments(client)
        risk_manager.reset_daily_counts()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
        schedule.every().day.at("09:00").do(
            lambda: asyncio.run(select_top_volatile_instruments(client))
        )
        schedule.every().day.at("00:01").do(risk_manager.reset_daily_counts)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
        while True:
            schedule.run_pending() # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            
            if trading_active:
                try:
                    await trading_cycle(client, risk_manager, strategy_manager)
                except Exception as e:
                    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await telegram_bot.send_message(f"‚ÄºÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n`{e}`\n–†–æ–±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
            
            await asyncio.sleep(15) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ —Ü–∏–∫–ª–∞

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
